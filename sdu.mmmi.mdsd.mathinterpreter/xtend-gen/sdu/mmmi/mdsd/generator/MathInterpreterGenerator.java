/**
 * generated by Xtext 2.16.0
 */
package sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import sdu.mmmi.mdsd.mathInterpreter.Div;
import sdu.mmmi.mdsd.mathInterpreter.Exp;
import sdu.mmmi.mdsd.mathInterpreter.MathExp;
import sdu.mmmi.mdsd.mathInterpreter.Minus;
import sdu.mmmi.mdsd.mathInterpreter.Mult;
import sdu.mmmi.mdsd.mathInterpreter.Plus;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathInterpreterGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final int result = this.compute(math);
    CharSequence _display = this.display(math);
    String _plus = ("Math expression = " + _display);
    System.out.println(_plus);
    JOptionPane.showMessageDialog(null, ("result = " + Integer.valueOf(result)), "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public int compute(final MathExp math) {
    return this.computeExp(math.getExp());
  }
  
  public int computeExp(final Exp e) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (e instanceof sdu.mmmi.mdsd.mathInterpreter.Number) {
      _matched=true;
      _switchResult = ((sdu.mmmi.mdsd.mathInterpreter.Number)e).getValue();
    }
    if (!_matched) {
      if (e instanceof Plus) {
        _matched=true;
        int _computeExp = this.computeExp(((Plus)e).getLeft());
        int _computeExp_1 = this.computeExp(((Plus)e).getRight());
        _switchResult = (_computeExp + _computeExp_1);
      }
    }
    if (!_matched) {
      if (e instanceof Minus) {
        _matched=true;
        int _computeExp = this.computeExp(((Minus)e).getLeft());
        int _computeExp_1 = this.computeExp(((Minus)e).getRight());
        _switchResult = (_computeExp - _computeExp_1);
      }
    }
    if (!_matched) {
      if (e instanceof Mult) {
        _matched=true;
        int _computeExp = this.computeExp(((Mult)e).getLeft());
        int _computeExp_1 = this.computeExp(((Mult)e).getRight());
        _switchResult = (_computeExp * _computeExp_1);
      }
    }
    if (!_matched) {
      if (e instanceof Div) {
        _matched=true;
        int _computeExp = this.computeExp(((Div)e).getLeft());
        int _computeExp_1 = this.computeExp(((Div)e).getRight());
        _switchResult = (_computeExp / _computeExp_1);
      }
    }
    if (!_matched) {
      _switchResult = 0;
    }
    return _switchResult;
  }
  
  public String printExp(final Exp e) {
    String _switchResult = null;
    boolean _matched = false;
    if (e instanceof Plus) {
      _matched=true;
      String _printExp = this.printExp(((Plus)e).getLeft());
      String _plus = (_printExp + "+");
      String _printExp_1 = this.printExp(((Plus)e).getRight());
      _switchResult = (_plus + _printExp_1);
    }
    if (!_matched) {
      if (e instanceof Minus) {
        _matched=true;
        String _printExp = this.printExp(((Minus)e).getLeft());
        String _plus = (_printExp + "-");
        String _printExp_1 = this.printExp(((Minus)e).getRight());
        _switchResult = (_plus + _printExp_1);
      }
    }
    if (!_matched) {
      if (e instanceof Mult) {
        _matched=true;
        String _printExp = this.printExp(((Mult)e).getLeft());
        String _plus = (_printExp + "*");
        String _printExp_1 = this.printExp(((Mult)e).getRight());
        _switchResult = (_plus + _printExp_1);
      }
    }
    if (!_matched) {
      if (e instanceof Div) {
        _matched=true;
        String _printExp = this.printExp(((Div)e).getLeft());
        String _plus = (_printExp + "/");
        String _printExp_1 = this.printExp(((Div)e).getRight());
        _switchResult = (_plus + _printExp_1);
      }
    }
    if (!_matched) {
      if (e instanceof sdu.mmmi.mdsd.mathInterpreter.Number) {
        _matched=true;
        _switchResult = Integer.valueOf(((sdu.mmmi.mdsd.mathInterpreter.Number)e).getValue()).toString();
      }
    }
    if (!_matched) {
      _switchResult = "";
    }
    return _switchResult;
  }
  
  public CharSequence display(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Math[");
    CharSequence _displayExp = this.displayExp(math.getExp());
    _builder.append(_displayExp);
    _builder.append("]");
    return _builder;
  }
  
  public CharSequence displayExp(final Exp e) {
    StringConcatenation _builder = new StringConcatenation();
    String _printExp = this.printExp(e);
    _builder.append(_printExp);
    return _builder;
  }
}
