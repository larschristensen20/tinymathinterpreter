/*
 * generated by Xtext 2.16.0
 */
package sdu.mmmi.mdsd.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import sdu.mmmi.mdsd.mathInterpreter.Div;
import sdu.mmmi.mdsd.mathInterpreter.MathExp;
import sdu.mmmi.mdsd.mathInterpreter.MathInterpreterPackage;
import sdu.mmmi.mdsd.mathInterpreter.Minus;
import sdu.mmmi.mdsd.mathInterpreter.Mult;
import sdu.mmmi.mdsd.mathInterpreter.Plus;
import sdu.mmmi.mdsd.services.MathInterpreterGrammarAccess;

@SuppressWarnings("all")
public class MathInterpreterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathInterpreterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathInterpreterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathInterpreterPackage.DIV:
				sequence_MultOrDiv(context, (Div) semanticObject); 
				return; 
			case MathInterpreterPackage.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case MathInterpreterPackage.MINUS:
				sequence_PlusOrMinus(context, (Minus) semanticObject); 
				return; 
			case MathInterpreterPackage.MULT:
				sequence_MultOrDiv(context, (Mult) semanticObject); 
				return; 
			case MathInterpreterPackage.NUMBER:
				sequence_Atomic(context, (sdu.mmmi.mdsd.mathInterpreter.Number) semanticObject); 
				return; 
			case MathInterpreterPackage.PLUS:
				sequence_PlusOrMinus(context, (Plus) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Exp returns Number
	 *     Atomic returns Number
	 *     Primary returns Number
	 *     PlusOrMinus returns Number
	 *     PlusOrMinus.Plus_1_0_0_0 returns Number
	 *     PlusOrMinus.Minus_1_0_1_0 returns Number
	 *     MultOrDiv returns Number
	 *     MultOrDiv.Mult_1_0_0_0 returns Number
	 *     MultOrDiv.Div_1_0_1_0 returns Number
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Atomic(ISerializationContext context, sdu.mmmi.mdsd.mathInterpreter.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MATH_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MATH_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Div
	 *     Primary returns Div
	 *     PlusOrMinus returns Div
	 *     PlusOrMinus.Plus_1_0_0_0 returns Div
	 *     PlusOrMinus.Minus_1_0_1_0 returns Div
	 *     MultOrDiv returns Div
	 *     MultOrDiv.Mult_1_0_0_0 returns Div
	 *     MultOrDiv.Div_1_0_1_0 returns Div
	 *
	 * Constraint:
	 *     (left=MultOrDiv_Div_1_0_1_0 op='/' right=Primary)
	 */
	protected void sequence_MultOrDiv(ISerializationContext context, Div semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.DIV__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.DIV__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.DIV__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.DIV__OP));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.DIV__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.DIV__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultOrDivAccess().getDivLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultOrDivAccess().getOpSolidusKeyword_1_0_1_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getMultOrDivAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Mult
	 *     Primary returns Mult
	 *     PlusOrMinus returns Mult
	 *     PlusOrMinus.Plus_1_0_0_0 returns Mult
	 *     PlusOrMinus.Minus_1_0_1_0 returns Mult
	 *     MultOrDiv returns Mult
	 *     MultOrDiv.Mult_1_0_0_0 returns Mult
	 *     MultOrDiv.Div_1_0_1_0 returns Mult
	 *
	 * Constraint:
	 *     (left=MultOrDiv_Mult_1_0_0_0 op='*' right=Primary)
	 */
	protected void sequence_MultOrDiv(ISerializationContext context, Mult semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULT__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULT__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULT__OP));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultOrDivAccess().getMultLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultOrDivAccess().getOpAsteriskKeyword_1_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getMultOrDivAccess().getRightPrimaryParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Minus
	 *     Primary returns Minus
	 *     PlusOrMinus returns Minus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Minus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Minus
	 *     MultOrDiv returns Minus
	 *     MultOrDiv.Mult_1_0_0_0 returns Minus
	 *     MultOrDiv.Div_1_0_1_0 returns Minus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Minus_1_0_1_0 op='-' right=MultOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MINUS__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MINUS__OP));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getOpHyphenMinusKeyword_1_0_1_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMultOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Plus
	 *     Primary returns Plus
	 *     PlusOrMinus returns Plus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Plus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Plus
	 *     MultOrDiv returns Plus
	 *     MultOrDiv.Mult_1_0_0_0 returns Plus
	 *     MultOrDiv.Div_1_0_1_0 returns Plus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Plus_1_0_0_0 op='+' right=MultOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS__OP));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getOpPlusSignKeyword_1_0_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMultOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
}
