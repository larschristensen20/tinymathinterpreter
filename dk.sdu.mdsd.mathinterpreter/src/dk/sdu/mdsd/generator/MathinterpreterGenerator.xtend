/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mdsd.mathinterpreter.MathExp
import dk.sdu.mdsd.mathinterpreter.Plus
import dk.sdu.mdsd.mathinterpreter.Minus
import dk.sdu.mdsd.mathinterpreter.Mult
import dk.sdu.mdsd.mathinterpreter.Div
import javax.swing.JOptionPane
import dk.sdu.mdsd.mathinterpreter.Exp
import dk.sdu.mdsd.mathinterpreter.Number

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathinterpreterGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = "+math.display)
		// For +1 score, replace with hovering, see Bettini Chapter 8
		JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	
	def int compute(MathExp math) { 
		math.exp.computeExp
	}	
	
	def int computeExp(Exp e) {
		switch e {
			Number: e.value
			Plus: e.left.computeExp + e.right.computeExp
			Minus: e.left.computeExp - e.right.computeExp
			Mult: e.left.computeExp *e.right.computeExp
			Div: e.left.computeExp /e.right.computeExp
			default: 0
		}
	}
	
	def String printExp(Exp e) {
		switch e {
			Number: e.value.toString()
			Plus: e.left.printExp + "+" + e.right.printExp
			Minus: e.left.printExp + "-" + e.right.printExp
			Mult: e.left.printExp + "*" + e.right.printExp
			Div: e.left.printExp + "/" + e.right.printExp
			default: ""
		}
	}
	
	
	
	def CharSequence display(MathExp math) '''Math[«math.exp.displayExp»]'''
	def CharSequence displayExp(Exp e) 
	'''Exp[«e.printExp»]'''
}
